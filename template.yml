AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Task Manager Serverless Applicaion"
Parameters:
  DlqTopicName:
    Type: String
    Default: ""
  LambdaRoleArn:
    Type: String
    Default: ""
  ServiceDomainName:
    Type: String
  ServiceCertArn:
    Type: String

Conditions:
  LambdaRoleRequired:
    Fn::Equals: [{ Ref: LambdaRoleArn }, ""]
  IsDefaultDLQName:
    Fn::Equals: [{ Ref: DlqTopicName }, ""]

Resources:
  # --------------------------------------------------------
  # Lambda functions
  Main:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: go1.x
      CodeUri: build
      Handler: main
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TaskTable
      Role:
        Fn::If:
          [
            LambdaRoleRequired,
            { "Fn::GetAtt": LambdaRole.Arn },
            { Ref: LambdaRoleArn },
          ]
      Events:
        GetAll:
          Type: Api
          Properties:
            Method: get
            Path: /v1/{user}/{date}
            RestApiId: { "Ref": "ApiGW" }

        GetTasks:
          Type: Api
          Properties:
            Method: get
            Path: /v1/{user}/{date}/task
            RestApiId: { "Ref": "ApiGW" }
        CreateTask:
          Type: Api
          Properties:
            Method: post
            Path: /v1/{user}/{date}/task
            RestApiId: { "Ref": "ApiGW" }
        UpdateTask:
          Type: Api
          Properties:
            Method: put
            Path: /v1/{user}/{date}/task/{task_id}
            RestApiId: { "Ref": "ApiGW" }
        DeleteTask:
          Type: Api
          Properties:
            Method: delete
            Path: /v1/{user}/{date}/task/{task_id}
            RestApiId: { "Ref": "ApiGW" }

        GetPomodoro:
          Type: Api
          Properties:
            Method: get
            Path: /v1/{user}/{date}/pomodoro
            RestApiId: { "Ref": "ApiGW" }
        CreatePomodoro:
          Type: Api
          Properties:
            Method: post
            Path: /v1/{user}/{date}/pomodoro/{task_id}
            RestApiId: { "Ref": "ApiGW" }
        UpdatePomodoro:
          Type: Api
          Properties:
            Method: put
            Path: /v1/{user}/{date}/pomodoro/{task_id}/{pomodoro_id}
            RestApiId: { "Ref": "ApiGW" }
        DeletePomodoro:
          Type: Api
          Properties:
            Method: delete
            Path: /v1/{user}/{date}/pomodoro/{task_id}/{pomodoro_id}
            RestApiId: { "Ref": "ApiGW" }

  ApiGW:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api

  DLQ:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::If:
          - IsDefaultDLQName
          - {
              "Fn::Sub":
                [
                  "sam-task-kitchen-dlq-${StackName}",
                  { StackName: { "Ref": "AWS::StackName" } },
                ],
            }
          - { "Ref": DlqTopicName }

  TaskTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  StaticContentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: ServiceDomainName
      WebsiteConfiguration:
        IndexDocument: index.html

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "${ServiceDomainName}.log"

  StaticContentsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticContentsBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
              - "s3:ListBucket"
            Effect: "Allow"
            Resource:
              - Fn::Sub: "arn:aws:s3:::${ServiceDomainName}/*"
              - Fn::Sub: "arn:aws:s3:::${ServiceDomainName}"
            Principal: "*"

  StaticContentDestribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - Ref: ServiceDomainName
        Origins:
          - DomainName:
              Fn::Sub: "${ServiceDomainName}.s3.amazonaws.com"
            Id: staticOrigin
            S3OriginConfig:
              OriginAccessIdentity: ""
          - DomainName:
              Fn::Sub:
                - "${apigId}.execute-api.${AWS::Region}.amazonaws.com"
                - { apigId: { "Ref": "ApiGW" } }
            Id: apiOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        Enabled: true
        Logging:
          IncludeCookies: true
          Bucket:
            Fn::Sub: "${ServiceDomainName}.log.s3.amazonaws.com"
          Prefix: cf-logs
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: ["GET", "HEAD"]
          Compress: true
          DefaultTTL: 300
          TargetOriginId: staticOrigin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - AllowedMethods:
              ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
              Headers:
                - Authorization
            PathPattern: "/api/*"
            TargetOriginId: apiOrigin
            ViewerProtocolPolicy: redirect-to-https
            MaxTTL: 0
            MinTTL: 0
            DefaultTTL: 0
        PriceClass: PriceClass_200
        ViewerCertificate:
          AcmCertificateArn:
            Ref: ServiceCertArn
          SslSupportMethod: sni-only

  # --------------------------------------------------------
  # IAM Roles
  LambdaRole:
    Type: AWS::IAM::Role
    Condition: LambdaRoleRequired
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "PublishDLQ"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - Ref: DLQ
        - PolicyName: "TableAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGet*
                  - dynamodb:DescribeStream
                  - dynamodb:DescribeTable
                  - dynamodb:Get*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWrite*
                  - dynamodb:CreateTable
                  - dynamodb:Delete*
                  - dynamodb:Update*
                  - dynamodb:PutItem
                Resource:
                  - Fn::GetAtt: TaskTable.Arn
                  - Fn::Sub:
                      [
                        "${TableArn}/index/*",
                        { TableArn: { "Fn::GetAtt": TaskTable.Arn } },
                      ]
